Random waves generation/absorption
====================================

Description
----------

Random waves in nature typically consist of non-repeatable wave sequences, so each individual wave has different characteristics. In this application, the free surface elevation timeseries that is generated consists of waves with respect to the wave characterstics of the spectrum (Hs,Tp,) defined in the script by the user. Random waves in nature usually follow spectral distributions e.g. JONSWAP and Pierson-Moskowitz spectra and their statistical properties can be predicted. An example of a spectral distribution is shown in the figure below.

.. figure:: ./Spectrum.PNG
   :width: 60%
   :align: center

Random wave sequences are generated by descritising the spectral distribution into frequency components and composing free-surface and velocity field by superimposing the free-surface elevation and velocity of each individual component. The amplitude of these components is calculated by the spectral distribution. The phasing of each component is either randomly allocated to generate a truly random series or pre-defined in order to generate focused waves. 

The methodology that has been developed and applied herein (Dimakopoulos et al., 2019), uses window processing from a reference timeseries, instead of a direct reconstruction of the spectrum, resulting in reduced computational time, while achieveing a non repeating, irregular wave-timeseries. Note tha the user has to set a suffieciently large number of frequency components to ensure non repeating patterns (e.g. 2000 frequency components for the genaration of an irregular timeseries of 1000 waves).

Test case
-----

The test case comprises a simple rectangular tank with generation zone at the left side ('x-') and absoprtion zone at the right side ('x+'). To run the test case type:

```
parun random_waves.py --TwoPhaseFlow -v -D result_folder
```

Wave properties can be modified by the commandline, using for example:

```
parun random_waves.py --TwoPhaseFlow -v -D result_folder -C "Tp=2. Hs=0.2"
```

To run in parallel (example with mpirun and 12 processors):

```
mpirun -np 12 parun random_waves.py --TwoPhaseFlow -v -D result_folder -C "Tp=2. Hs=0.2"
```


To see guidance on parun options, you can type  

```
parun -h
```


References
----------

- Goda, (2009). Random Seas and Design of Maritime Structures, World Scientific, Singapore
  
- Dean and Dalrymple, (1991). Water Wave Mechanics for Engineers and Scientists, World Scientific, Singapore 

- Dimakopoulos A., de Lataillade T. and Kees C., (2019) Fast random wave generation in numerical tanks. Available online: https://www.icevirtuallibrary.com/doi/abs/10.1680/jencm.17.00016






